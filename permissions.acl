rule NetworkAdminUser {
    description: "Grant business network administrators full access to user resources"
    participant: "org.hyperledger.composer.system.NetworkAdmin"
    operation: ALL
    resource: "**"
    action: ALLOW
}

rule NetworkAdminSystem {
    description: "Grant business network administrators full access to system resources"
    participant: "org.hyperledger.composer.system.NetworkAdmin"
    operation: ALL
    resource: "org.hyperledger.composer.system.**"
    action: ALLOW
}

rule AllCanRead {
    description: "All have access to read system resources"
    participant: "ANY"
    operation: READ
    resource: "**"
    action: ALLOW
}

rule AllCanCreateHistory{
  description: "All can participant in transaction"
  participant: "ANY"
  operation: CREATE
  resource: "org.hyperledger.composer.system.HistorianRecord" 
  action: ALLOW
}

rule OrganizationCreateAsset{
  description: "Only Organization can create asset"
  participant: "network.certificate.participants.Organization"
  operation: CREATE
  resource: "org.hyperledger.composer.system.AddAsset" 
  action: ALLOW
}

rule EvaluteExamTransactionAccessToInstructor {
    description: "Only Instructor can Evalute Exam"
  	participant(m): "network.certificate.participants.Instructor"
    operation: UPDATE
    resource(ee): "network.certificate.assets.ExamEvalution"
  transaction(tx): "network.certificate.transactions.EvaluteExam"
    condition: (
      function(){
      return (ee.examEvalution.exam.course.courseDetails.instructor.getIdentifier() == m.getIdentifier() && !ee.examEvalution.isExamined);
      })
    action: ALLOW
}

rule CreateEvaluteExamToInstructor {
    description: "Only Instructor can Evalute Exam"
    participant(m): "network.certificate.participants.Instructor"
    operation: CREATE,READ
    resource(v): "network.certificate.transactions.EvaluteExam"
    condition: (v.examEvalution.exam.course.courseDetails.instructor.getIdentifier()==m.getIdentifier())
    action: ALLOW
}

rule UpdateStudentToStudent {
    description: "Description of the ACL rule"
    participant(m): "network.certificate.participants.Student"
    operation: READ, UPDATE
    resource(v): "network.certificate.participants.Student"
    condition: (m.getIdentifier() == v.getIdentifier())
    action: ALLOW
}

rule EnrollCourseAccessToStudent {
    description: "Provide enroll course access to student"
    participant(m): "network.certificate.participants.Student"
    operation: READ, CREATE
    resource(v): "network.certificate.transactions.EnrollCourse"
    condition: (m.getIdentifier() == v.student.getIdentifier())
    action: ALLOW
}

rule CreateCourseToOrganization {
    description: "Course only be offered by the Organization"
    participant(m): "network.certificate.participants.Organization"
    operation: ALL
    resource(v): "network.certificate.assets.Course"
    condition: (v.organization.getIdentifier()==m.getIdentifier())
    action: ALLOW
}

rule CreateExamEvalutionToOrganization {
    description: "Certificate only be assigned by the Organization"
    participant(m): "network.certificate.participants.Organization"
    operation: ALL
    resource(v): "network.certificate.assets.ExamEvalution"
    condition: (v.exam.course.organization.getIdentifier()==m.getIdentifier())
    action: ALLOW
}

rule CreateCertificateToOrganization {
    description: "Certificate only be assigned by the Organization"
    participant(m): "network.certificate.participants.Organization"
    operation: ALL
    resource(v): "network.certificate.assets.Certificate"
    condition: (v.createdBy.getIdentifier()==m.getIdentifier())
    action: ALLOW
}

rule AssignCertificateByOrganization {
    description: "AssignCertificate only be assigned by the Organization"
    participant(m): "network.certificate.participants.Organization"
    operation: CREATE,READ
    resource(v): "network.certificate.transactions.AssignCertificate"
    condition: (m.getIdentifier()==v.certificate.createdBy.getIdentifier())
    action: ALLOW
}

rule AssignCertificateByOrganizationToStudent {
    description: "AssignCertificate only be assigned by the Organization"
    participant(m): "network.certificate.participants.Organization"
    operation: UPDATE,READ
    resource(v): "network.certificate.participants.Student"
  	transaction(tx): "network.certificate.transactions.AssignCertificate"
    condition: (m.getIdentifier()==tx.certificate.createdBy.getIdentifier())
    action: ALLOW
}